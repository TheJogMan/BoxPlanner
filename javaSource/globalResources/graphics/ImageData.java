package globalResources.graphics;

import java.awt.Color;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;

import globalResources.utilities.ByteConverter;

/**
 * Loads an image from disk
 */
public class ImageData
{
	int width;
	int height;
	int[] pixels;
	
	/**
	 * Loads an image from the given file path
	 * @param path file path to the image
	 */
	public ImageData(String path)
	{
		try
		{
			BufferedImage image = ImageIO.read(Image.class.getResourceAsStream(path));
			
			width = image.getWidth();
			height = image.getHeight();
			pixels = new int[image.getWidth() * image.getHeight()];
			
			for (int x = 0; x < image.getWidth(); x++)
			{
				for (int y = 0; y < image.getHeight(); y++)
				{
					Color color = new Color(image.getRGB(x, y), true);
					pixels[x + y * image.getWidth()] = color.getRGB();
				}
			}
			image.flush();
		}
		catch (Exception e)
		{
			System.out.println("ImageData: Failed to load image! (" + path + "; " + e.getClass().getName() + ": " + e.getMessage() + ")");
			width = 10;
			height = 10;
			pixels = new int[width * height];
			for (int index = 0; index < pixels.length; index++) pixels[index] = 0xFFFFFFFF;
		}
	}
	
	public ImageData(BufferedImage image)
	{
		width = image.getWidth();
		height = image.getHeight();
		pixels = new int[width * height];
		for (int x = 0; x < width; x++)
		{
			for (int y = 0; y < height; y++)
			{
				pixels[x + y * width] = image.getRGB(x, y);
			}
		}
	}
	
	/**
	 * Converts a canvas into ImageData
	 * @param canvas the canvas to be converted
	 */
	public ImageData(Drawable canvas)
	{
		width = canvas.getWidth();
		height = canvas.getHeight();
		pixels = new int[width * height];
		for (int x = 0; x < width; x++)
		{
			for (int y = 0; y < height; y++)
			{
				pixels[x + y * width] = canvas.getPixel(x, y);
			}
		}
	}
	
	public ImageData(int[] pixels, int width, int height)
	{
		this.width = width;
		this.height = height;
		this.pixels = pixels.clone();
	}
	
	/**
	 * Creates ImageData from a byte array
	 * @param byteData the byte array to be used
	 */
	public ImageData(byte[] byteData)
	{
		int[] fullData = ByteConverter.toIntegerArray(byteData);
		width = fullData[0];
		height = fullData[1];
		pixels = new int[width * height];
		for (int index = 0; index < pixels.length; index++)
		{
			pixels[index] = fullData[2 + index];
		}
	}
	
	/**
	 * Generates a byte array from this ImageData
	 * @return the generated byte array
	 */
	public byte[] getAsBytes()
	{
		int[] fullData = new int[pixels.length + 2];
		fullData[0] = width;
		fullData[1] = height;
		for (int index = 0; index < pixels.length; index++)
		{
			fullData[2 + index] = pixels[index];
		}
		return ByteConverter.fromIntegerArray(fullData);
	}
	
	/**
	 * Gets the width of this ImageData
	 * @return image width
	 */
	public int getWidth()
	{
		return width;
	}
	
	/**
	 * Gets the height of this ImageData
	 * @return image height
	 */
	public int getHeight()
	{
		return height;
	}
	
	public int getPixel(int index)
	{
		return pixels[index];
	}
}